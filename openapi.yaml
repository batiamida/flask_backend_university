openapi: 3.0.3
info:
  title: Swagger StudentScore - OpenAPI 3.0

  termsOfService: http://swagger.io/terms/
  contact:
    email: yevhen.tomashy.kn.2021@lpnu.ua
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://studentscore3.swagger.io/api/v3
tags:
  - name: student
    description: student's information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  
  - name: teacher
    description: teacher's information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  
  
  - name: score
    description: Access to student's score
    externalDocs:
      description: your score
      url: http://swagger.io
  
  - name: subject
    description: Subjects in university
    externalDocs:
      description: subjects
      url: http://swagger.io
  - name: user
    description: for user's operations
    externalDocs:
      description: users
      url: http://swagger.io
      
  
paths:

  /user/login:
    get:
      tags:
        - user
      summary: user login
      description: ''
      operationId: login
      parameters:
        - name: email
          in: query
          description: The email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the teacher
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid email/password supplied

  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  /subject:
    post:
      tags:
        - subject
      summary: Create new subject
      description: creates new subject
      operationId: createSubject
      requestBody:
        description: it creates new subject
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Successful operation

  /teacher:
    put:
      tags:
        - teacher
      summary: Update an existing teacher
      description: update an existing teacher by Id
      requestBody:
        description: Update an existent teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'

        '400':
          description: Invalid ID supplied
        '404':
          description: Teacher is not found
        '405':
          description: Validation exception

    post:
      tags:
        - teacher
      summary: create teacher's account
      description: it creates new account for the teacher
      operationId: createTeacher
      requestBody:
        description: it creates new account for the teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: Successful operation


    delete:
      tags:
        - teacher
      summary: Deletes teacher
      description: delete a teacher
      operationId: deleteTeacher
      parameters:
        - name: id
          in: header
          description: ''
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Teacher was deleted

        '400':
          description: Invalid teacher information

      security:
        - teacher_auth:
            - write:teacher
            - read:teacher

  /student:
    put:
      tags:
        - student
      summary: Update an existing student
      description: Update an existing student by Id
      operationId: updateStudent
      requestBody:
        description: Update an existent student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'


        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedStudent'

        '400':
          description: Invalid ID supplied
        '404':
          description: Student is not found
        '405':
          description: Validation exception
      security:
        - student_auth:
            - write:students
            - read:students
    post:
      tags:
        - student
      summary: Create a new student
      description: Create a new student
      operationId: createStudent


      requestBody:
        description: Create a new Student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'

        required: true
      responses:
        '200':
          description: Student was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedStudent'

        '405':
          description: Invalid input
      security:
        - student_auth:
            - write:students
            - read:students

    delete:
      tags:
        - student
      summary: Deletes student
      description: delete a student
      operationId: deleteStudent
      parameters:
        - name: id
          in: header
          description: ''
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Student was deleted

        '400':
          description: Invalid student information

      security:
        - student_auth:
            - write:students
            - read:students

  /score:
    post:
      tags:
        - score
      summary: create score for an existent student
      operationId: postScore
      requestBody:
        description: create score for an existent student
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
      responses:
        '200':
          description: score was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'

        '405':
          description: Invalid input


    put:
      tags:
        - score
      summary: update an exisiting student's score'
      description: Update an existing student's score by Id
      operationId: updateScore
      requestBody:
          description: Update an existent student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'

          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'

        '400':
          description: Invalid ID supplied
        '404':
          description: Student is not found
        '405':
          description: Validation exception

    get:
      tags:
        - score
      summary: get top scores
      description: returning top scores among all of the students
      operationId: getScore
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
        '404':
          description: Scores are not found


  /score/{studentId}:
    get:
      tags:
        - score
      summary: get student's score by student's id
      description: Returns a score
      operationId: getScoreById
      parameters:
        - name: studentId
          in: path
          description: ID of student to return score
          required: true
          schema:
            type: integer
            format: int64
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Score'
          '400':
            description: Invalid ID supplied
          '404':
            description: Score is not found

      security:
          - teacher_auth:
              - write:scores
              - read:scores


components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        password:
          type: string
          example: '123123'


    CreatedStudent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10


    Score:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5

        studentId:
          type: integer
          format: int64
          example: 5

        teacherId:
          type: integer
          format: int64
          example: 1

        subjectId:
          type: integer
          format: int64
          example: 3

        score:
          type: integer
          format: int64
          example: 10

    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1

        name:
          type: string
          example: 'John'

        surname:
          type: string
          example: 'Dou'

        email:
          type: string
          example: 'dou@gmail.com'

        password:
          type: string
          example: '1232'


    Subject:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 8

        name:
          type: string
          example: 'mathematics'
        
        
    
  securitySchemes:
    student_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://universityscore/authorization
          scopes:
            write:students: modify your student's account
            read:students: read students information
           
    teacher_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://universityscore/authorization
          scopes:
            write:teacher: modify your student's account
            read:teacher: read students information
            write:scores: modify scores
            read:scores: read scores
    
    
    
    api_key:
      type: apiKey
      name: api_key
      in: header